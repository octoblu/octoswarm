#!/bin/bash

assert_required_params(){
  local swarm_env_dir="$1"
  local service_name="$2"
  local subdomain="$3"

  if [ -n "$swarm_env_dir" -a -n "$service_name" -a -n "$subdomain" ]; then
    return 0
  fi

  usage

  if [ -z "$service_name" ]; then
    echo "service_name is required"
  fi

  if [ -z "$swarm_env_dir" ]; then
    echo "SWARM_ENV_DIR is empty"
  fi

  if [ -z "$subdomain" ]; then
    echo "subdomain is required"
  fi

  exit 1
}

debug() {
  local debug_key='swarm-migrate-to-dev'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

copy_env(){
  local swarm_env_dir="$1"
  local service_name="$2"
  local subdomain="$3"

  local dest_dir="$swarm_env_dir/env.d/$service_name"
  if [ ! -d "$dest_dir" ]; then
    echo "WARNING! you'll need to manually copy over the environment"
  fi
}

generate_service(){
  local swarm_env_dir="$1"
  local service_name="$2"
  local subdomain="$3"

  mkdir -p "$swarm_env_dir/services/$service_name"
  export SERVICE_NAME="$service_name" SUBDOMAIN="$subdomain"
  local start_script="$swarm_env_dir/services/$service_name/start"
  local stop_script="$swarm_env_dir/services/$service_name/stop"
  cat "$swarm_env_dir/services/_template/start" | envsubst > "$start_script" && chmod +x "$start_script"
  cat "$swarm_env_dir/services/_template/stop" | envsubst > "$stop_script" && chmod +x "$stop_script"
  unset SERVICE_NAME
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: swarm-migrate-to-dev'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo '  -s, --service-name the name of the service'
  echo '  -d, --subdomain    subdomain to use'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  SWARM_ENV_DIR      path to stack env directory.'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

env_add() {
  local swarm_env_dir="$1"
  local service_name="$2"
  local folder_name="$3"

  local env_folder="$swarm_env_dir/env.d/$folder_name"
  if [ -d "$env_folder" ]; then
    pushd "$env_folder" > /dev/null
    for file in $(ls); do
      value="$(cat $file)"
      docker service update --env-add "$file=$value" "$service_name" > /dev/null
    done
    popd > /dev/null
  fi
}

main() {
  local service_name
  local subdomain

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      -s | --service-name)
        service_name="$value"
        ;;
      -d | --subdomain)
        subdomain="$value"
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done

  local swarm_env_dir="$SWARM_ENV_DIR"

  assert_required_params "$swarm_env_dir" "$service_name" "$subdomain"

  debug "swarm_env_dir: $swarm_env_dir"
  debug "service_name: $service_name"

  copy_env "$swarm_env_dir" "$service_name"
  generate_service "$swarm_env_dir" "$service_name" "$subdomain"
}

main "$@"
