#!/bin/bash

debug() {
  local debug_key='stack'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: stack <script-name> [options]'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  SWARM_ENV_DIR      swarn env dir. defaults to $HOME/Projects/Octoblu/swarm-$STACK_ENV_NAME'
  echo '  STACK_BIN_DIR      stack bin dir. defaults to $SWARM_ENV_DIR/bin'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

run_script() {
  local script="$1"; shift
  "$script" "$@"
}

assert_stack_dirs() {
  if [ ! -d "$SWARM_ENV_DIR" ]; then
    debug "SWARM_ENV_DIR $SWARM_ENV_DIR"
    fatal "SWARM_ENV_DIR is not a directory"
  fi
  if [ ! -d "$STACK_BIN_DIR" ]; then
    debug "STACK_BIN_DIR $STACK_BIN_DIR"
    fatal "STACK_BIN_DIR is not a directory"
  fi
}

get_commands() {
  for file in `find "$STACK_BIN_DIR" -type f -maxdepth 1 -iname 'stack-*'`; do
    echo "stack ${file/${STACK_BIN_DIR}\/stack\-/}"
  done
}

assert_stack_script() {
  local script_name="$1"
  if [ ! -f "$STACK_BIN_DIR/stack-$script_name" ]; then
    echo "The stack script does not exist, stack-$script_name"
    echo ''
    echo 'It must be one of the following scripts:'
    echo ''
    get_commands
    echo ''
    return 1
  fi
  return 0
}

ensure_correct_deps() {
  if [[ $(docker --version) != *'1.13'* ]]; then
    echo "Your docker version (`docker --version`) is likely not compatible, just be safe, and upgrade it"
    echo "Make sure Docker for Mac (Stable) is installed and up-to-date with version 1.13"
    fatal 'docker must be version 1.13.x'
  fi
  brew info openssl &> /dev/null
  if [ "$?" != "0" ]; then
    echo "Docker is not compatible with the native version of openssl"
    echo "Just to be safe, please run 'brew install openssl' - don't worry about linking it (it is keg-only)"
    fatal 'openssl must be installed via brew'
  fi
  return 0
}

main() {
  ensure_correct_deps
  local script_name="$1"

  local swarm_env_dir="$SWARM_ENV_DIR"
  local stack_bin_dir="$STACK_BIN_DIR"

  if [ -z "$swarm_env_dir" ]; then
    IFS='/' read -a segments <<< "$PWD"
    local swarm_dirname="${segments[5]}"
    if [[ $swarm_dirname != *'swarm-'* ]]; then
      swarm_dirname='swarm-prod'
    else
      (>&2 echo "NOTICE: we dynamically figured out you are running ${swarm_dirname}")
    fi
    swarm_env_dir="${HOME}/Projects/Octoblu/${swarm_dirname}"
    export SWARM_ENV_DIR="$swarm_env_dir"
  fi

  if [ -z "$stack_bin_dir" -a -n "$swarm_env_dir" ]; then
    stack_bin_dir="$(script_directory)/../stack"
    export STACK_BIN_DIR="$stack_bin_dir"
  fi

  assert_stack_dirs "$swarm_env_dir" "$stack_bin_dir"
  assert_stack_script "$script_name"

  if [ "$?" == "0" ]; then
    shift
    debug "running script stack-$script_name"
    run_script "$stack_bin_dir/stack-$script_name" "$@"
    exit $?
  fi

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done
}

main "$@"
