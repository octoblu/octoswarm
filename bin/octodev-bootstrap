#!/bin/bash

assert_required_params(){
  local stack_env_dir="$1"
  local mongo_uri="$2"

  if [ -n "$mongo_uri" -a -n "$stack_env_dir" -a -d "$stack_env_dir" ]; then
    return 0
  fi

  usage

  if [ -z "$mongo_uri" ]; then
    echo "mongo_uri is required"
  fi

  if [ -z "$stack_env_dir" ]; then
    echo "STACK_ENV_DIR is empty"
  fi

  if [ ! -d "$stack_env_dir" ]; then
    echo 'STACK_ENV_DIR is not a directory'
  fi

  exit 1
}

debug() {
  local debug_key='octodev-bootstrap'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: octodev-bootstrap <mongo_uri>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  STACK_ENV_DIR      path to stack env directory.'
  echo '                       Default: $HOME/Projects/Octoblu/the-stack-env-development'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

import_device() {
  local mongo_uri="$1"
  local file="$2"
  local uuid="$(cat $file | jq '.uuid')"
  local json_str="$(cat $file | jq --compact-output --monochrome-output '.')"
  bash -c "mongo $mongo_uri --quiet --eval 'db.devices.update({uuid:$uuid}, $json_str, {upsert:true})'" > /dev/null
}

get_device_files() {
  local stack_env_dir="$1"
  find "$stack_env_dir/devices.d" -name '*.json' -type f
}

bootstrap_mongo() {
  local stack_env_dir="$1"
  local mongo_uri="$2" 
  local files=( $(get_device_files "$stack_env_dir") )
  for file in "${files[@]}"; do
    debug "processing $file"
    import_device "$mongo_uri" "$file" || fatal "erroring importing $file to $mongo_uri"
  done
}

main() {
  local mongo_uri

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$mongo_uri" -a -n "$param" ]; then
          mongo_uri="$param"
        fi
        ;;
    esac
    shift
  done


  local stack_env_dir="$STACK_ENV_DIR"

  if [ -z "$stack_env_dir" ]; then
    stack_env_dir="$HOME/Projects/Octoblu/the-stack-env-development"
  fi

  assert_required_params "$stack_env_dir" "$mongo_uri"

  debug "stack_env_dir: $stack_env_dir"
  debug "mongo_uri: $mongo_uri"

  bootstrap_mongo "$stack_env_dir" "$mongo_uri"
}

main "$@"
