#!/bin/bash

assert_machine_name(){
  local machine_name="$1"
  local service_name="$3"
  local instance_name="$3"

  if [ -z "$machine_name" ]; then
    echo "could not find a machine running an instance named ${service_name}.${instance_name}"
    exit 1
  fi
}
assert_required_params(){
  local service_name="$1"
  local instance_name="$2"

  if [ -n "$service_name" -a -n "$instance_name" ]; then
    return 0
  fi

  usage
  echo ""

  if [ -z "$instance_name" ]; then
    echo "instance_name is required"
  fi

  if [ -z "$service_name" ]; then
    echo "service_name is required"
  fi

  exit 1
}

fatal() {
  local message="$1"
  echo "Error: $message"
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: swarm-follow-instance <service-name> <instance-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo ''
  echo 'EXAMPLE: swarm-follow-instance slurry-exchange 1'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

get_service_line(){
  local service_name="$1"
  local instance_name="$2"

  docker service ps "$service_name" \
  | grep Running \
  | grep "${service_name}.${instance_name}"
}

get_docker_machine_name() {
  local service_name="$1"
  local instance_name="$2"

  get_service_line "$service_name" "$instance_name" \
  | awk '{print $4}'
}

get_docker_instance_name() {
  local service_name="$1"
  local instance_name="$2"

  local prefix="$(get_docker_instance_name_prefix "$service_name" "$instance_name")"
  local suffix="$(get_docker_instance_name_suffix "$service_name" "$instance_name")"

  echo "$prefix.$suffix"
}

get_docker_instance_name_prefix() {
  local service_name="$1"
  local instance_name="$2"

  echo "$service_name.$instance_name"
}

get_docker_instance_name_suffix() {
  local service_name="$1"
  local instance_name="$2"

  get_service_line "$service_name" "$instance_name" \
  | awk '{print $1}'
}

follow_instance() {
  local service_name="$1"
  local instance_name="$2"

  local machine_name="$(get_docker_machine_name $service_name $instance_name)"
  assert_machine_name "$machine_name"

  local docker_instance_name="$(get_docker_instance_name $service_name $instance_name)"
  local docker_config="$(docker-machine config $machine_name)"

  echo "Following $docker_instance_name..."
  docker $docker_config logs -f "$docker_instance_name"

  echo "following: $service_name.$instance_name"

}

main() {
  local service_name;
  local instance_name;

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$service_name" ]; then
          service_name="$param"
        elif [ -z "$instance_name" ]; then
          instance_name="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$service_name" "$instance_name"
  follow_instance "$service_name" "$instance_name"
}

main "$@"
