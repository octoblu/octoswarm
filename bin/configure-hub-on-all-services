#!/bin/bash

SCRIPT_NAME='configure-hub-on-all-services'

matches_debug() {
  if [ -z "$DEBUG" ]; then
    return 1
  fi
  if [[ $SCRIPT_NAME == $DEBUG ]]; then
    return 0
  fi
  return 1
}

debug() {
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  local message="$@"
  matches_debug || return 0
  (>&2 echo -e "[${cyan}${SCRIPT_NAME}${no_color}]: $message")
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

assert_required_params() {
  local services_path="$1"

  if [ -n "$services_path" -a -d "$services_path" ]; then
    return 0
  fi

  usage

  if [ -z "$services_path" ]; then
    echo "Missing services_path argument"
  fi

  if [ ! -d "$services_path" ]; then
    echo 'Services path is not a directory'
  fi

  exit 1
}

usage(){
  echo "USAGE: ${SCRIPT_NAME} </path/to/services/>"
  echo ''
  echo 'Description: Update all services to use the latest docker hub stuff'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help       print this help text'
  echo '  -v, --version    print the version'
  echo ''
  echo 'Environment:'
  echo '  DEBUG            print debug output'
  echo ''
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown-version"
  fi
}

main() {
  local services_path
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$services_path" ]; then
          services_path="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$services_path"

  for service_path in $(find $services_path -type d -maxdepth 1); do
    local service_name="${service_path/$services_path\//}"
    curl "https://github.com/octoblu/${service_name}" --fail --silent &> /dev/null
    if [ "$?" != "0" ]; then
      echo "skipping $service_name"
      continue
    fi
    echo "$service_name"
    beekeeper hub "$service_name"
    sleep 1
  done
}

main "$@"
