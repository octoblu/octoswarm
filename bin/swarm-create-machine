#!/bin/bash

assert_required_params(){
  local machine_id="$1"

  if [ -n "$machine_id" ]; then
    return 0
  fi

  usage

  if [ -z "$machine_id" ]; then
    fatal "machine_id is required"
  fi

  exit 1
}

debug() {
  local debug_key='create-machine'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: swarm-create-machine <machine-id>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

create_machine() {
  local machine_id="$1"
  local options="$2"
  echo "$(docker-machine create $options "$machine_id")"
}

copy_to_template() {
  local machine_id="$1"
  local src_dir="$2"
  local dest_dir="$3"

  cp -rfp "$src_dir/$machine_id" "$dest_dir/$machine_id"
  local config_file="$dest_dir/$machine_id/config.json"
  cat  "$config_file" | sed "s;$HOME;\$HOME;g" > "$config_file.tmp" && \
    mv "$config_file.tmp" "$config_file"
}

main() {
  local machine_id
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$machine_id" -a -n "$param" ]; then
         machine_id="${param}"
        fi
        ;;
    esac
    shift
  done

  local template_dir=""

  assert_required_params "$machine_id"
  echo "Creating $machine_id"
  create_machine "$machine_id" "$*" && \
    mkdir -p "$STACK_ENV_DIR/machine/machines" "$STACK_ENV_DIR/machine-template/machines" "$STACK_ENV_DIR/machine-template/certs" && \
    copy_to_template "$machine_id" "$STACK_ENV_DIR/machine/machines" "$STACK_ENV_DIR/machine-template/machines" && \
    cp -rfp $STACK_ENV_DIR/machine/certs/* "$STACK_ENV_DIR/machine-template/certs/"
}

main "$@"
