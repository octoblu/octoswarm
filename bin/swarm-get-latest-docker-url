#!/bin/bash

assert_required_params(){
  local service_name="$1"

  if [ -n "$service_name" ]; then
    return 0
  fi

  usage

  if [ -z "$service_name" ]; then
    echo "service_name is missing"
  fi

  exit 1
}

fatal() {
  local message="$1"
  echo "Error: $message"
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: swarm-get-latest-docker-url <service-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

get_beekeeper_docker_url() {
  local service_name="$1"
  local latest_docker_url="$(curl -s "https://beekeeper.octoblu.com/deployments/$service_name/latest" | jq -r '.docker_url')"
  echo "$latest_docker_url"
}

main() {
  local service_name

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$service_name" -a -n "$param" ]; then
         service_name="${param}"
        fi
        ;;
    esac
    shift
  done
  assert_required_params "$service_name"

  local docker_url="$(get_beekeeper_docker_url "$service_name")"
  if [ -z "$docker_url" -o "$docker_url" == "null" ]; then
    echo "Could not get latests docker url, PANIC!!" 1>&2
    exit 1
  fi

  echo "$docker_url"
}

main "$@"
