#!/bin/bash

assert_required_params(){
  local projects_dir="$1"
  local owner="$2"
  local project_name="$3"

  if [ -n "$project_name" -a -n "$projects_dir" -a -n "$owner" ]; then
    return 0
  fi

  usage

  if [ -z "$project_name" ]; then
    echo "project_name is required"
  fi

  if [ -z "$projects_dir" ]; then
    echo "PROJECTS_DIR is empty"
  fi

  if [ -z "$owner" ]; then
    echo "GITHUB_OWNER is empty"
  fi

  exit 1
}

debug() {
  local debug_key='ensure-project'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: ensure-project <project-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  PROJECTS_DIR       path to stack env directory.'
  echo '                       Default: $HOME/Projects/Octoblu'
  echo '  GITHUB_OWNER       github owner'
  echo '                       Default: octoblu'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

check_git(){
  git fetch origin
  local get_log="$(git log HEAD..origin/master --oneline)"
  if [[ -n "$get_log" ]]; then
    echo ''
    echo 'WARNING: this project is behind remote!'
    echo "$get_log"
    echo ''
    local git_pull=''
    read -s -p "press 'y' to pull, any other key to exit"$'\n' -n 1 git_pull
    if [[ "$git_pull" == 'y' ]]; then
      echo 'pulling...'
      git pull
    else
      exit 1
    fi
  fi
}

check_master(){
  CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
  if [ "$CURRENT_BRANCH" != "master" ]; then
    echo ''
    echo 'WARNING: this project is not in the master branch!'
    echo `git status | head -1`
    echo ''
    read -p "Press [Enter] key to continue..."
  fi
  return 0
}

ensure_exists() {
  local projects_dir="$1"
  local owner="$2"
  local project_name="$3"
  if [ -d "$projects_dir/$project_name" ]; then
    debug 'project exists'
    return 0
  fi
  pushd "$projects_dir" > /dev/null
    debug "cloning $owner/$project_name"
    hub clone "$owner/$project_name" || fatal 'unable to clone project'
  popd > /dev/null
}

ensure_up_to_date() {
  local projects_dir="$1"
  local owner="$2"
  local project_name="$3"
  pushd "$projects_dir/$project_name" > /dev/null
    debug 'making sure it is up to date' 
    check_master
    check_git
  popd "$projects_dir" > /dev/null
}

main() {
  local project_name

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$project_name" -a -n "$param" ]; then
          project_name="$param"
        fi
        ;;
    esac
    shift
  done


  local projects_dir="$PROJECTS_DIR"

  if [ -z "$projects_dir" ]; then
    projects_dir="$HOME/Projects/Octoblu"
  fi

  local owner="$GITHUB_OWNER"

  if [ -z "$owner" ]; then
    owner='octoblu'
  fi

  assert_required_params "$projects_dir" "$owner" "$project_name"

  debug "project_name: $project_name"
  debug "projects_dir: $projects_dir"
  debug "owner: $owner"

  ensure_exists "$projects_dir" "$owner" "$project_name"
  ensure_up_to_date "$projects_dir" "$owner" "$project_name"
}

main "$@"
