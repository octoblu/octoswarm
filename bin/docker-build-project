#!/bin/bash

assert_required_params(){
  local projects_dir="$1"
  local project_name="$2"

  if [ -n "$project_name" -a -n "$projects_dir" ]; then
    return 0
  fi

  usage

  if [ -z "$project_name" ]; then
    echo "project_name is required"
  fi

  if [ -z "$projects_dir" ]; then
    echo "PROJECTS_DIR is empty"
  fi

  exit 1
}

debug() {
  local debug_key='docker-build-project'
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  local is_valid_debug="$?"
  if [ "$debug_key" == '*' -a "$is_valid_debug" != "0" ]; then
    return 0
  fi
  local message="$@"
  (>&2 echo -e "[${cyan}${debug_key}${no_color}]: $message")
}

fatal() {
  local message="$1"
  (>&2 echo "Error: $message")
  exit 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE: docker-build-project <project-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  PROJECTS_DIR       path to stack env directory.'
  echo '                       Default: $HOME/Projects/Octoblu'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

build_project() {
  local projects_dir="$1"
  local project_name="$2"
  pushd "$projects_dir/$project_name" > /dev/null
    docker build -t "$project_name:dev" . || exit 1
  popd > /dev/null
}

main() {
  local project_name

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$project_name" -a -n "$param" ]; then
          project_name="$param"
        fi
        ;;
    esac
    shift
  done


  local projects_dir="$PROJECTS_DIR"

  if [ -z "$projects_dir" ]; then
    projects_dir="$HOME/Projects/Octoblu"
  fi

  assert_required_params "$projects_dir" "$project_name"

  debug "project_name: $project_name"
  debug "projects_dir: $projects_dir"

  build_project "$projects_dir" "$project_name"
}

main "$@"
