#!/bin/bash

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-destroy-cluster" "$@"
}

usage(){
  echo 'USAGE: stack destroy-cluster <path/to/stack>'
  echo 'Description: Destroy a cluster (more informational than destructive)'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help               print this help text'
  echo '  -v, --version            print the version'
  echo '  -i, --info               print the destroy instructions'
  echo 'Environment:'
  echo '  DEBUG                    print debug output'
  echo ''
  info
}

assert_required_params(){
  local stack_path="$1"

  if [ -n "$stack_path" -a -d "$stack_path"  ]; then
    return 0
  fi

  usage

  if [ -z "$stack_path" ]; then
    echo "stack_path argument is missing"
  fi

  if [ ! -d "$stack_path" ]; then
    echo "$stack_path is not a directory"
  fi

  exit 1
}

remove_docker_machine_files() {
  local stack_path="$1"
  local machine_templates="${stack_path}/docker-machine"
  if [ -d "${machine_templates}" ]; then
    debug "removing ${machine_templates}"
    rm -rf "${machine_templates}"
  fi
}

info() {
  local removed="$1"
  echo 'Instructions:'
  echo ''
  if [ "$removed" == 'true' ]; then
    echo "The machine files and templates have been removed from this stack."
  else
    echo "This command will remove machine files and templates from this stack."
    echo "The rest are manual steps."
  fi
  echo "The old servers, load balancers, DNS records have not been touched, terminated, or removed."
  echo "Now just close octoswarm, and run 'stack ensure-cluster' inside of the folder with the cluster.json."
  echo "Once the new cluster is up and running, log into aws console and remove the old servers from the load balancers."
  echo "Once you confirm that the new cluster has successfully replaced the old cluster, terminate the old servers."
}

main() {
  local stack_path
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      -i | --info)
        info
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$stack_path" ]; then
          stack_path="$param"
        fi
        ;;
    esac
    shift
  done

  if [ ! -d "$stack_path" ]; then
    stack_path="$STACK_DIR"
  fi

  if [ ! -d "$stack_path" ]; then
    stack_path="$PWD"
  fi

  assert_required_params "$stack_path"

  remove_docker_machine_files "$stack_path"
  info 'true'
}

main "$@"
