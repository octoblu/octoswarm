#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-ensure-cluster" "$@"
}

usage(){
  echo 'USAGE: stack-create-cluster'
  echo 'Description: bootstrap a cluster'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help               print this help text'
  echo '  -v, --version            print the version'
  echo 'Environment:'
  echo '  DEBUG                    print debug output'
}

version(){
  local directory="$(script_directory)/.."

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

require_config_value() {
  local key="$1"
  check_config_value "$key"
  local is_valid="$?"
  if [ "$is_valid" != "0" ]; then
    echo "* Cannot get $key from config."
    fatal "$STACK_CONFIG_PATH is invalid json."
  fi
}

check_config_value() {
  local key="$1"
  cat "$STACK_CONFIG_PATH" | jq "$key" &> /dev/null
  local is_valid="$?"
  if [ "$is_valid" != "0" ]; then
    return 1
  fi
  return 0
}

assert_required_config() {
  require_config_value '.'
  require_config_value '.stackEnvName'
  require_config_value '.stackName'
  require_config_value '.managers.count'
  require_config_value '.managers.instanceType'
  require_config_value '.workers.count'
  require_config_value '.workers.instanceType'
  require_config_value '.services[]'
}

get_config_val() {
  local key="$1"
  local value="$(cat "$STACK_CONFIG_PATH" | jq --raw-output "$key")"
  if [ -z "$value" -o "$?" != "0" ]; then
    fatal "Unable to get $key from config"
  fi
  debug "got $key = $value"
  echo "$value"
}

get_config_array() {
  local key="$1"
  cat "$STACK_CONFIG_PATH" | jq --compact-output "$key"
}

is_stack_empty() {
  if [ -d "$MACHINE_STORAGE_PATH/machines" ]; then
    return 0
  fi
  return 1
}

get_interface() {
  local machine_id="$1"
  local ifconf="$(docker-machine ssh "$machine_id" ifconfig)"
  if [ "$?" != "0" ]; then
    fatal 'Unable to ssh into machine'
    return 1
  fi
  echo "$ifconf" | grep eth0 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'eth0'
    return 0
  fi
  echo "$ifconf" | grep ens3 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'ens3'
    return 0
  fi
  return 1
}

create_stack(){
  debug 'about to create stack'
  local ec2_instance_type="$(get_config_val '.managers.instanceType')"

  echo "Stack doesn't exist, we are going to create the first manager..."
  say_yes || fatal 'Exiting due to human fear.'

  local machine_id="$(swarm-generate-machine-id manager)"
  debug "machine_id $machine_id"

  stack create-machine \
    --ec2-instance-type "$ec2_instance_type" \
    "$machine_id" || fatal 'unable to create machine'

  debug 'machine is created'
  debug 'sleep for 10 seconds to wait for docker'
  sleep 10
  eval $(docker-machine env --shell=bash "$machine_id")

  local interface="$(get_interface "$machine_id")"
  if [ "$?" != "0" ]; then
    fatal "$interface"
  fi

  docker $(docker-machine config "$machine_id") \
    swarm init \
    --advertise-addr "$interface" \
    --listen-addr "$interface" || fatal 'unable to initialize swarm'
}

main() {
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done

  assert_required_config

  is_stack_empty && fatal 'stack exists, cowardly refusing to do anything'

  create_stack
}

main "$@"
