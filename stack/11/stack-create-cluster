#!/bin/bash

SCRIPT_NAME="stack-create-cluster"

# shellcheck disable=SC1091
source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

usage(){
  echo "USAGE: $SCRIPT_NAME"
  echo 'Description: bootstrap a cluster'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help               print this help text'
  echo '  -v, --version            print the version'
  echo 'Environment:'
  echo '  DEBUG                    print debug output'
}

assert_required_config() {
  require_config_value '.'
  require_config_value '.managers.count'
  require_config_value '.managers.instanceType'
  require_config_value '.workers.count'
  require_config_value '.workers.instanceType'
  require_config_value '.services[]'
}

get_interface() {
  local machine_id="$1"
  local ifconf
  ifconf="$(docker-machine ssh "$machine_id" ifconfig)"
  if [ "$?" != "0" ]; then
    fatal 'Unable to ssh into machine'
    return 1
  fi
  echo "$ifconf" | grep eth0 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'eth0'
    return 0
  fi
  echo "$ifconf" | grep ens3 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'ens3'
    return 0
  fi
  return 1
}

create_stack(){
  debug 'about to create stack'
  local ec2_instance_type
  local docker_version
  local machine_id
  local interface
  local ec2_tags
  ec2_instance_type="$(get_config_val '.managers.instanceType')"
  docker_version="$(get_config_val '.octoswarm.dockerVersion')"
  ec2_tags="$(get_ec2_tags_by_role 'manager')"

  echo "Stack doesn't exist, we are going to create the first manager..."
  say_yes || fatal 'Exiting due to human fear.'

  machine_id="$(swarm-generate-machine-id manager)"
  debug "machine_id $machine_id"

  stack create-machine \
    --ec2-tags "$ec2_tags" \
    --docker-version "$docker_version" \
    --ec2-instance-type "$ec2_instance_type" \
    "$machine_id" || fatal 'unable to create machine'

  debug 'machine is created'
  eval "$(docker-machine env --shell=bash "$machine_id")"

  interface="$(get_interface "$machine_id")"
  if [ "$?" != "0" ]; then
    fatal "$interface"
  fi

  run_cmd docker $(docker-machine config "$machine_id") \
    swarm init \
    --advertise-addr "$interface" \
    --listen-addr "$interface" || fatal 'unable to initialize swarm'
}

main() {
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done

  assert_required_config

  is_stack_empty && fatal 'stack exists, cowardly refusing to do anything'

  create_stack
}

main "$@"
