#!/bin/bash

SCRIPT_NAME='stack-ensure-elb'

# shellcheck disable=SC1091
source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

usage(){
  echo "USAGE: ${SCRIPT_NAME} [OPTIONS] [/path/to/cluster.json]"
  echo ''
  echo 'Description: will setup A & SRV records.'
  echo ''
  echo "Example: ${SCRIPT_NAME}"
  echo ''
  echo 'Arguments:'
  echo '  -h, --help       print this help text'
  echo "  -n, --dry-run    show what records will be created/updated"
  echo "                   but don't actually do anything"
  echo '  -v, --version    print the version'
  echo ''
  echo 'Environment:'
  echo '  DEBUG            print debug output'
  echo ''
}
# Script Functions
ensure_elb() {
  debug 'ensuring elbs'
  get_elbs | while read elb; do
    local elb_name
    elb_name="$(echo "$elb" | jq --raw-output ".")"
    elb_exists "$elb_name"
    local exists=$?
    if [ "$exists" == "1" ]; then
      debug "elb $elb_name does not exist"
      echo "ELB count insufficient, creating elb ($elb_name)..."
      say_yes || continue
      stack create-elb "$elb_name"
    else
      debug "elb $elb_name exists"
    fi
    debug "adding to elb $elb_name"
    for node_id in $(get_node_ids); do
      stack add-to-elb "$node_id" "$elb_name" || fatal 'unable to add to elb'
    done
  done
}

get_elbs() {
  check_config_value ".elbs[]"
  local has_elbs="$?"
  if [ "$has_elbs" == "0" ]; then
    get_config_array '.elbs[]'
  fi
}

# Primary execution

main() {
  local config_path

  while [ "$1" != "" ]; do
    local param="$1"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        # Set main arguments
        if [ -z "$config_path" ]; then
          config_path="$param"
        fi
        ;;
    esac
    shift
  done

  if [ ! -d "$config_path" ]; then
    config_path="$STACK_DIR/cluster.json"
  fi

  if [ ! -d "$config_path" ]; then
    config_path="$PWD/cluster.json"
  fi

  is_stack_empty || fatal 'Not initialized, run `create-cluster`'

  ensure_elb || fatal 'unable to ensure elb'
}

main "$@"
