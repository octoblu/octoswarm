#!/bin/bash

SCRIPT_NAME="stack-ensure-pingdom-check"

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

usage(){
  echo "USAGE: $SCRIPT_NAME <service_name>"
  echo 'Description: ensure pingdom alerts for a service'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help        print this help text'
  echo '  -v, --version     print the version'
  echo 'Environment:'
  echo '  DEBUG             print debug output'
}

assert_required_params() {
  local service_name="$1"
  if [ -z "$service_name" ]; then
    fatal 'Missing service-name as first arg'
  fi
}

get_pingdom_path() {
  local service="$1"
  local path="$(get_service_val "$service" '.pingdom.path')"
  if [ "$path" == "" ]; then
    path="/healthcheck"
  fi
  echo "$path"
}

get_pingdom_tags() {
  local service="$1"
  local parent_tags="$(get_config_val '.pingdom.tags')"
  local service_tags="$(get_service_val "$service" '.pingdom.tags')"
  local search_tags="$(get_service_full_name "$service")"
  local stack_env_name="$(get_config_val '.stackEnvName')"
  local stack_name="$(get_config_val '.stackName')"

  if [ "$parent_tags" == "null" ]; then
    parent_tags=""
  fi
  if [ "$parent_tags" != "" ]; then
    parent_tags="$parent_tags,"
  fi
  if [ "$service_tags" != "" ]; then
    service_tags="$service_tags,"
  fi
  echo "$stack_env_name,$stack_name,$stack_env_name-$stack_name,$parent_tags$service_tags$search_tags"
}

add_pingdom_check() {
  local service="$1"
  local check_id="$(find_pingdom_check "$service")"

  echo "check_id=$check_id"

  if [ "$check_id" == "" ]; then
    create_pingdom_check "$service"
  else
    update_pingdom_check "$service" "$check_id"
  fi
}

create_pingdom_check() {
  local service="$1"
  local exit_code
  local name="$(get_service_full_name "$service")"
  local path="$(get_pingdom_path "$service")"
  local tags="$(get_pingdom_tags "$service")"
  local host="$(get_service_val "$service" '.traefik.host')"

  curl \
    --silent \
    --request POST \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data 'type=http' \
    --data 'paused=false' \
    --data 'resolution=1' \
    --data 'encryption=true' \
    --data 'contactids=11058966,10866214' \
    --data 'sendtoemail=true' \
    --data 'sendnotificationwhendown=5' \
    --data 'notifywhenbackup=true' \
    --data 'shouldcontain={"online":true}' \
    --data 'use_legacy_notifications=true' \
    --data "name=$name" \
    --data "host=$host" \
    --data "tags=$tags" \
    --data "url=$path" \
    https://api.pingdom.com/api/2.0/checks
}

ensure_pingdom_check() {
  local service="$1"
  debug "ensure pingdom check"
  local check="$(get_service_val "$service" '.pingdom.check')"
  if [ "$check" == "true" ]; then
    add_pingdom_check "$service"
  fi
  if [ "$check" == "false" ]; then
    remove_pingdom_check "$service"
  fi
}

find_pingdom_check() {
  local service="$1"
  local search_tags="$(get_service_full_name "$service")"

  local result="$(curl \
    --silent \
    --request GET \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    "https://api.pingdom.com/api/2.0/checks?limit=1&tags=$search_tags")"

  local check_id="$(echo "$result" | jq --raw-output '.checks[0].id')"

  if [ "$check_id" == "null" ]; then
    check_id=""
  fi

  echo $check_id
}

pause_pingdom_check() {
  local service="$1"
  local check_id="$2"

  curl \
    --silent \
    --request PUT \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data 'paused=true' \
    "https://api.pingdom.com/api/2.0/checks/$check_id"
}

remove_pingdom_check() {
  local service="$1"
  local check_id="$(find_pingdom_check "$service")"

  echo "check_id=$check_id"

  if [ "$check_id" == "" ]; then
    pause_pingdom_check "$service" "$check_id"
  fi
}

update_pingdom_check() {
  local service="$1"
  local check_id="$2"

  local name="$(get_service_full_name "$service")"
  local path="$(get_pingdom_path "$service")"
  local tags="$(get_pingdom_tags "$service")"
  local host="$(get_service_val "$service" '.traefik.host')"

  curl \
    --silent \
    --request PUT \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data 'paused=false' \
    --data 'resolution=1' \
    --data 'encryption=true' \
    --data 'contactids=11058966,10866214' \
    --data 'sendtoemail=true' \
    --data 'sendnotificationwhendown=5' \
    --data 'notifywhenbackup=true' \
    --data 'shouldcontain={"online":true}' \
    --data 'use_legacy_notifications=true' \
    --data "name=$name" \
    --data "host=$host" \
    --data "tags=$tags" \
    --data "url=$path" \
    "https://api.pingdom.com/api/2.0/checks/$check_id"
}

main() {
  local service_name
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$service_name" ]; then
          service_name="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$service_name"

  is_stack_empty || fatal 'Not initialized, run `create-cluster`'

  local services=( $(get_config_array '.services[]') )
  local _service_name
  local exit_code
  for service in "${services[@]}"; do
    _service_name="$(get_service_val "$service" '.name')"
    if [ "$service_name" == "$_service_name" ]; then
      ensure_pingdom_check "$service"
      exit_code=$?
      exit $exit_code
    fi
  done
}

main "$@"
