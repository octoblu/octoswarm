#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-add-service" "$@"
}

assert_required_params(){
  local service_name="$1"

  if [ -n "$service_name" -a ]; then
    return 0
  fi

  usage

  if [ -z "$service_name" ]; then
    echo "service_name is missing"
  fi

  exit 1
}


usage(){
  echo 'USAGE: stack-add-service <service-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo 'Environment:'
  echo '  DEBUG              print debug output'
}

version(){
  local directory="$(script_directory)/.."

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

main() {
  local service_name

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$service_name" -a -n "$param" ]; then
         service_name="${param}"
        fi
        ;;
    esac
    shift
  done

  if [ ! -d "$STACK_ENV_DIR/$service_name" ]; then
    fatal "This service does not have an environment"
  fi
  echo "Copying environment to stack..."
  mkdir -p "$STACK_ENV_DIR/$service_name"
  cp -rfp $STACK_ENV_DIR/$service_name/* "$STACK_ENV_DIR/$service_name" && \
    echo "done."
}

main "$@"
