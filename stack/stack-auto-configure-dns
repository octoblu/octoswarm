#!/bin/bash

SCRIPT_NAME='stack-auto-configure-dns'

# Utilities

matches_debug() {
  if [ -z "$DEBUG" ]; then
    return 1
  fi
  if [[ $SCRIPT_NAME == $DEBUG ]]; then
    return 0
  fi
  return 1
}

debug() {
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  local message="$@"
  matches_debug || return 0
  (>&2 echo -e "[${cyan}${SCRIPT_NAME}${no_color}]: $message")
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

assert_required_params() {
  local domain="$1"
  local zone_name="$2"

  if [ -n "$domain" -a -n "$zone_name" ]; then
    return 0
  fi

  usage

  if [ -z "$domain" ]; then
    echo "Missing <domain> argument"
  fi

  if [ -z "$zone_name" ]; then
    echo "Missing <zone-name> argument"
  fi

  exit 1
}

usage(){
  echo "USAGE: ${SCRIPT_NAME} <domain> <zone-name> [/path/to/cluster.json]"
  echo ''
  echo 'Description: will setup A & SRV records.'
  echo ''
  echo "Example: ${SCRIPT_NAME} \"dev.octo.space\" \"octo.space.\""
  echo ''
  echo 'Arguments:'
  echo '  -h, --help       print this help text'
  echo "  -n, --dry-run    show what records will be created/updated"
  echo "                   but don't actually do anything"
  echo '  -v, --version    print the version'
  echo ''
  echo 'Environment:'
  echo '  DEBUG            print debug output'
  echo ''
}
# Script Functions

find_services(){
  jq '.services[].name' \
    --raw-output \
    "$config_path"
}

generate_change_batch(){
  local config_path="$1"
  local domain="$2"
  local load_balancer_dns="$3"
  local load_balancer_target_zone="$4"
  local directory="$(script_directory)"

  env \
    CONFIG_PATH="$config_path" \
    DOMAIN="$domain" \
    LOAD_BALANCER_DNS="$load_balancer_dns" \
    ZONE_ID="$load_balancer_target_zone" \
    $directory/stack-write-route-53-multi-batch-file
}

get_load_balancer_dns() {
  local load_balancer_name="$1"
  local load_balancers=( $(get_load_balancers "$load_balancer_name") )
  for load_balancer in "${load_balancers[@]}"; do
    local load_balancer_dns="$(echo "$load_balancer" | jq -r '.CanonicalHostedZoneName')"
    if [ -n "$load_balancer_dns" ]; then
      echo "$load_balancer_dns"
      return 0
    fi
  done
  return 1
}

get_load_balancer_name(){
  local config_path="$1"

  local elb_count="$(jq '.managers.elbs | length' "$config_path")"
  if [ "$elb_count" != "1" ]; then
    echo "Found multiple elbs, cowardly refusing to do anything: "
    echo "$(jq '.managers.elbs' "$config_path")"
    exit 1
  fi

  jq '.managers.elbs[]' \
    --raw-output \
    "$config_path"
}

get_load_balancer_target_zone() {
  local load_balancer_name="$1"
  local load_balancers=( $(get_load_balancers "$load_balancer_name") )
  for load_balancer in "${load_balancers[@]}"; do
    local load_balancer_target_zone="$(echo "$load_balancer" | jq -r '.CanonicalHostedZoneNameID')"
    if [ -n "$load_balancer_target_zone" ]; then
      echo "$load_balancer_target_zone"
      return 0
    fi
  done
  return 1
}

get_load_balancers() {
  local filter="$1"
  aws elb describe-load-balancers --load-balancer-names "$filter" | jq --compact-output  '.LoadBalancerDescriptions[]'
}

get_route53_hosted_zone(){
  local domain="$1"

  aws route53 list-hosted-zones \
  | jq ".HostedZones | map(select(.Name == \"$domain\"))[0].Id"
}

# Primary execution

main() {
  local config_path
  local domain
  local zone_name
  local dry_run='false'

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      # Arg with value
      # -x | --example)
      #   example="$value"
      #   shift
      #   ;;
      # Arg without value
      -n | --dry-run)
        dry_run='true'
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$domain" ]; then
          domain="$param"
        elif [ -z "$zone_name" ]; then
          zone_name="$param"
        elif [ -z "$config_path" ]; then
          config_path="$param"
        fi
        # Set main arguments
        # if [ -z "$main_arg" ]; then
        #   main_arg="$param"
        # elif [ -z "$main_arg_2"]; then
        #   main_arg_2="$param"
        # fi
        ;;
    esac
    shift
  done

  if [ ! -d "$config_path" ]; then
    config_path="$STACK_DIR/cluster.json"
  fi

  if [ ! -d "$config_path" ]; then
    config_path="$PWD/cluster.json"
  fi

  assert_required_params "$domain" "$zone_name"

  local load_balancer_name="$(get_load_balancer_name "$config_path")"
  local load_balancer_dns="$(get_load_balancer_dns "$load_balancer_name")"
  local load_balancer_target_zone="$(get_load_balancer_target_zone "$load_balancer_name")"
  local route53_hosted_zone=$(get_route53_hosted_zone "$zone_name")
  if [ -z "$route53_hosted_zone" -o "$route53_hosted_zone" == "null" ]; then
    echo "Could not find route53 hosted zone for: $domain"
    exit 1
  fi

  local change_batch="$(generate_change_batch "$config_path" "$domain" "$load_balancer_dns" "$load_balancer_target_zone")"

  if [ "$dry_run" == "true" ]; then
    echo "$change_batch"
    exit 0
  fi

  local tmpfile="$(mktemp)"
  echo "$change_batch" > "$tmpfile"

  echo aws route53 \
    change-resource-record-sets \
    --hosted-zone-id "$route53_hosted_zone" \
    --change-batch "file://$tmpfile" || fatal 'Unable to create route'
}

main "$@"
