#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-initialize" "$@"
}

usage(){
  echo 'USAGE: stack-initialize'
  echo 'Description: initialize a cluster'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help               print this help text'
  echo '  -t, --ec2-instance-type  ec2 instance type to spin up'
  echo '                           (default: t2.medium)'
  echo '  -s, --skip-elb           skip elb creation'
  echo '  -v, --version            print the version'
  echo 'Environment:'
  echo '  DEBUG                    print debug output'
}

version(){
  local directory="$(script_directory)/.."

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

assert_required_env() {
  if [ -n "$STACK_NAME" ]; then
    return 0
  fi

  if [ -z "$STACK_NAME" ]; then
    echo "Missing env STACK_NAME. Are you running in an octoswarm session?"
  fi

  exit 1
}

assert_required_params(){
  local stack_env_name="$1"
  local stack_name="$2"

  if [ -n "$stack_env_name" -a -n "$stack_name"  ]; then
    return 0
  fi

  usage

  if [ -z "$stack_env_name" ]; then
    echo "stack_env_name is missing"
  fi

  if [ -z "$stack_name" ]; then
    echo "stack_name is missing"
  fi

  exit 1
}

assert_stack_empty() {
  if [ -d "$RAW_MACHINE_STORAGE_PATH" ]; then
    fatal 'Stack already has machines'
  fi
}

get_interface() {
  local machine_id="$1"
  local ifconf="$(docker-machine ssh "$machine_id" ifconfig)"
  if [ "$?" != "0" ]; then
    fatal 'Unable to ssh into machine'
    return 1
  fi
  echo "$ifconf" | grep eth0 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'eth0'
    return 0
  fi
  echo "$ifconf" | grep ens3 &> /dev/null
  if [ "$?" == "0" ]; then
    echo 'ens3'
    return 0
  fi
  return 1
}

main() {
  local ec2_instance_type="t2.medium"
  local skip_elb
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -t | --ec2-instance-type)
        ec2_instance_type="$value"
        shift
        ;;
      -s | --skip-elb)
        skip_elb="true"
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done
  debug "ec2_instance_type $ec2_instance_type"

  assert_stack_empty

  local machine_id="$(swarm-generate-machine-id manager)"
  debug "machine_id $machine_id"

  assert_required_env

  stack create-machine \
    --ec2-instance-type "$ec2_instance_type" \
    "$machine_id" || fatal 'unable to create machine'

  debug 'machine is created'
  debug 'sleep for 10 seconds to wait for docker'
  sleep 10
  eval $(docker-machine env --shell=bash "$machine_id")

  local interface="$(get_interface "$machine_id")"
  if [ "$?" != "0" ]; then
    fatal "$interface"
  fi

  docker $(docker-machine config "$machine_id") \
    swarm init \
    --advertise-addr "$interface" \
    --listen-addr "$interface" || fatal 'unable to initialize swarm'

  if [ "$skip_elb" != "true" ]; then
    local lb_name="${stack_env_name}-${stack_name}"
    debug "configuring elb '$lb_name'"

    stack create-elb "$lb_name" || fatal 'unable to create elb'

    stack add-to-elb "$machine_id" "$lb_name" || fatal 'unable to add stack elb'
  fi
}

main "$@"
