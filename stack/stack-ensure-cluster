#!/bin/bash

SCRIPT_NAME="stack-ensure-cluster"

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

usage(){
  echo "USAGE: $SCRIPT_NAME"
  echo 'Description: ensure a cluster is up-to-date'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help        print this help text'
  echo '  -v, --version     print the version'
  echo 'Environment:'
  echo '  DEBUG             print debug output'
}

assert_required_config() {
  require_config_value '.'
  require_config_value '.managers.count'
  require_config_value '.managers.instanceType'
  require_config_value '.workers.count'
  require_config_value '.workers.instanceType'
  require_config_value '.services[]'
}

get_manager_elbs() {
  check_config_value ".managers.elbs[]"
  local has_elbs="$?"
  if [ "$has_elbs" == "0" ]; then
    get_config_array '.managers.elbs[]'
  fi
}

ensure_managers_elb() {
  debug 'ensuring managers elb'
  local elbs=( $(get_manager_elbs) )
  local elb_name
  for elb in "${elbs[@]}"; do
    elb_name="$(echo "$elb" | jq --raw-output ".")"
    elb_exists "$elb_name"
    local exists=$?
    if [ "$exists" == "1" ]; then
      debug "elb $elb_name does not exist"
      echo "ELB count insufficient, creating elb ($elb_name)..."
      say_yes || continue
      stack create-elb "$elb_name"
    else
      debug "elb $elb_name exists"
    fi
    debug "adding to elb $elb_name"
    for manager_id in $(get_manager_ids); do
      stack add-to-elb "$manager_id" "$elb_name" || fatal 'unable to add to elb'
    done
  done
}

ensure_managers() {
  debug 'ensuring managers'
  local count
  local expected_count
  local ec2_instance_type
  count="$(get_managers_count)"
  expected_count="$(get_config_val '.managers.count')"
  ec2_instance_type="$(get_config_val '.managers.instanceType')"
  if [ "$count" -gt "$expected_count" ]; then
    debug "The current count of managers is greater than expected count"
    debug "SKIPPING..."
    return 0
  fi
  if [ "$count" == "$expected_count" ]; then
    debug "Managers count in sync with expected count"
    debug "SKIPPING..."
    return 0
  fi
  let "count_to_start = $expected_count - $count"
  debug "creating $count_to_start more managers"

  for i in $(seq 1 $count_to_start); do
    debug 'creating a manager in the background'
    let "real_count = $count + $i"
    echo "Manager count insufficient, creating manager #$real_count..."
    say_yes || continue
    stack create-manager \
      --ec2-instance-type "$ec2_instance_type" &
  done
  debug 'waiting for managers to boot'
  wait $(jobs -p)
}

ensure_workers() {
  local count
  local expected_count
  local ec2_instance_type
  count="$(get_workers_count)"
  expected_count="$(get_config_val '.workers.count')"
  ec2_instance_type="$(get_config_val '.workers.instanceType')"

  if [ "$count" -gt "$expected_count" ]; then
    debug "The current count of workers is greater than expected count"
    debug "SKIPPING..."
    return 0
  fi

  if [ "$count" == "$expected_count" ]; then
    debug "Workers count in sync with expected count"
    debug "SKIPPING..."
    return 0
  fi

  let "count_to_start = $expected_count - $count"
  debug "creating $count_to_start more workers"

  for i in $(seq 1 $count_to_start); do
    debug "creating a worker in the background"
    let "real_count = $count + $i"
    echo "Worker count insufficient, creating worker #$real_count..."
    say_yes || continue
    stack create-worker \
      --ec2-instance-type "$ec2_instance_type" &
  done
  debug 'waiting for workers to boot'
  wait $(jobs -p)
}

get_service_name() {
  local service="$1"
  echo "$service" | jq -r '.name'
}

ensure_services() {
  debug 'ensure services'
  local services=( $(get_config_array '.services[]') )
  local name
  for service in "${services[@]}"; do
    name="$(get_service_name "$service")"
    stack ensure-service "$name" || fatal "unable to ensure service $name"
  done
}

main() {
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done

  assert_required_config

  is_stack_empty || fatal 'Not initialized, run `create-cluster`'

  ensure_managers || fatal 'unable to ensure managers'
  ensure_managers_elb || fatal 'unable to ensure managers elb'
  ensure_workers || fatal 'unable to ensure workers'
  ensure_services || fatal 'unable to ensure services'
}

main "$@"
