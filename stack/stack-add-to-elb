#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-add-to-elb" "$@"
}

assert_required_params() {
  local machine_id="$1"
  local load_balancer_name="$2"

  if [ -n "$machine_id" -a -n "$load_balancer_name" ]; then
    return 0
  fi

  usage
  echo ''

  if [ -z "$machine_id" ]; then
    echo "Missing machine-id as first argument"
    exit 1
  fi

  if [ -z "$load_balancer_name" ]; then
    echo "Missing load-balancer-name as second argument"
    exit 1
  fi

  exit 1
}

assert_required_options() {
  local instance_id="$1"

  if [ -n "$instance_id" ]; then
    return 0
  fi

  if [ -z "$instance_id" ]; then
    echo "Unable to retrieve instance id from 'aws ec2 describe-instances --filters \"Name=tag:Name,Values=\$filter\" | jq --compact-output  '.Reservations[].Instances[]''"
  fi

  exit 1
}

get_services() {
  local filter="$1"
  aws ec2 describe-instances --filters "Name=tag:Name,Values=$filter" | jq --compact-output  '.Reservations[].Instances[]'
}

get_instance_id() {
  local machine_id="$1"
  local services=( $(get_services "$machine_id") )
  for service in "${services[@]}"; do
    local instance_id="$(echo "$service" | jq -r '.InstanceId')"
    if [ -n "$instance_id" ]; then
      echo "$instance_id"
      return 0
    fi
  done
  return 1
}

register_instance() {
  local instance_id="$1"
  local load_balancer_name="$2"
  aws elb register-instances-with-load-balancer --load-balancer-name "$load_balancer_name" --instances "$instance_id" > /dev/null
  local exit_code=$?
  if [ "$exit_code" == "0" ]; then
    debug 'successfully registered the instance'
  fi
  return $exit_code
}

usage(){
  echo 'USAGE: stack-add-to-elb <machine-id> <load-balancer-name>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help             print this help text'
  echo '  -v, --version          print the version'
  echo 'Environment:'
  echo '  AWS_ACCESS_KEY_ID      AWS Access ID'
  echo '  AWS_SECRET_ACCESS_KEY  AWS Secret Key'
  echo '  AWS_DEFAULT_REGION     AWS Default Region'
  echo '  DEBUG                  print debug output'
}

version(){
  local directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

main() {
  local machine_id
  local load_balancer_name
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$machine_id" ]; then
          machine_id="$param"
        elif [ -z "$load_balancer_name" ]; then
          load_balancer_name="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$machine_id" "$load_balancer_name"

  local instance_id="$(get_instance_id "$machine_id")"
  debug "machine id '$machine_id'"
  debug "instance id '$instance_id'"
  debug "load balancer name '$load_balancer_name'"

  assert_required_options "$instance_id"

  register_instance "$instance_id" "$load_balancer_name" || fatal 'Unable to register instance'
}

main "$@"
