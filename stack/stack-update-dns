#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-update-dns" "$@"
}

assert_required_params() {
  local load_balancer_name="$1"
  local subdomain="$2"

  if [ -n "$load_balancer_name" -a -n "$subdomain" ]; then
    return 0
  fi

  usage
  echo ''

  if [ -z "$load_balancer_name" ]; then
    echo "Missing load-balancer-name as first argument"
    exit 1
  fi

  if [ -z "$subdomain" ]; then
    echo "Missing subdomain as second argument"
    exit 1
  fi

  exit 1
}

get_load_balancers() {
  local filter="$1"
  aws elb describe-load-balancers --load-balancer-names "$filter" | jq --compact-output  '.LoadBalancerDescriptions[]'
}

get_load_balancer_dns() {
  local load_balancer_name="$1"
  local load_balancers=( $(get_load_balancers "$load_balancer_name") )
  for load_balancer in "${load_balancers[@]}"; do
    local load_balancer_dns="$(echo "$load_balancer" | jq -r '.CanonicalHostedZoneName')"
    if [ -n "$load_balancer_dns" ]; then
      echo "$load_balancer_dns"
      return 0
    fi
  done
  return 1
}

get_load_balancer_target_zone() {
  local load_balancer_name="$1"
  local load_balancers=( $(get_load_balancers "$load_balancer_name") )
  for load_balancer in "${load_balancers[@]}"; do
    local load_balancer_target_zone="$(echo "$load_balancer" | jq -r '.CanonicalHostedZoneNameID')"
    if [ -n "$load_balancer_target_zone" ]; then
      echo "$load_balancer_target_zone"
      return 0
    fi
  done
  return 1
}

get_route53_hosted_zone(){
  local domain="$1"

  aws route53 list-hosted-zones \
  | jq --raw-output ".HostedZones | map(select(.Name == \"$domain.\"))[0].Id"
}

usage(){
  echo 'USAGE: stack-update-dns <load-balancer-name> <subdomain> <domain>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help                       print this help text'
  echo '  -v, --version                    print the version'
  echo 'Environment:'
  echo '  AWS_ACCESS_KEY_ID      AWS Access ID'
  echo '  AWS_SECRET_ACCESS_KEY  AWS Secret Key'
  echo '  AWS_DEFAULT_REGION     AWS Default Region'
  echo '  DEBUG                  print debug output'
}

main() {
  local load_balancer_name
  local subdomain
  local domain
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$load_balancer_name" ]; then
          load_balancer_name="$param"
        elif [ -z "$subdomain" ]; then
          subdomain="$param"
        elif [ -z "$domain" ]; then
          domain="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$load_balancer_name" "$subdomain"

  if [ "$domain" == "" ]; then
    domain="octoblu.com"
  fi

  debug "load_balancer_name $load_balancer_name"

  local load_balancer_dns="$(get_load_balancer_dns "$load_balancer_name")"
  local load_balancer_target_zone="$(get_load_balancer_target_zone "$load_balancer_name")"
  debug "load_balancer_dns $load_balancer_dns"
  debug "load_balancer_target_zone $load_balancer_target_zone"
  debug "domain to create: $subdomain.$domain"

  local file_path="$(mktemp)"

  local script_dir="$(script_directory)"

  env OUTPUT_PATH="$file_path" \
    DOMAIN="$subdomain.$domain" \
    ZONE_ID="$load_balancer_target_zone" \
    ALIAS="$load_balancer_dns" \
    $script_dir/stack-write-route-53-batch-file

  local route53_hosted_zone=$(get_route53_hosted_zone "$domain")
  if [ -z "$route53_hosted_zone" -o "$route53_hosted_zone" == "null" ]; then
    echo "Could not find route53 hosted zone for: $domain"
    exit 1
  fi

  debug "route53_hosted_zone: $route53_hosted_zone"

  aws route53 \
    change-resource-record-sets \
    --hosted-zone-id "$route53_hosted_zone" \
    --change-batch "file://$file_path" || fatal 'Unable to create route'
}

main "$@"
