#!/bin/bash

set_ulimit() {
  sudo sysctl -w kern.ipc.somaxconn=4096
  sudo sysctl -w kern.maxfiles=12288
  sudo sysctl -w kern.maxfilesperproc=10240
  ulimit -n 10240
}

say_yes() {
  local response
  if [ "$SAY_YES" == 'false' ]; then
    echo "You've choosen to not just always say yes. So we are not just gonna do it."
    read -r -s -p "press 'y' if you want to continue."$'\n' -n 1 response
    if [[ "$response" == 'y' ]]; then
      echo 'Good choice...'
      return 0
    fi
    echo 'Fine. Skipping...'
    return 1
  fi

  return 0
}

confirm_please() {
  local response
  read -r -s -p "press 'y' if you want to continue."$'\n' -n 1 response
  if [[ "$response" != 'y' ]]; then
    exit 1
  fi
}

debug_core() {
  local debug_key="$1"; shift
  local cyan='\033[0;36m'
  local white='\033[0;97m'
  local no_color='\033[0;0m'
  local exit_code
  if [ -z "$DEBUG" ]; then
    return 0
  fi
  echo "$debug_key" | grep "$DEBUG"
  exit_code=$?
  if [ "$debug_key" == '*' ] && [ "$exit_code" != "0" ]; then
    return 0
  fi
  local timestamp
  timestamp="$(date +%s%3N)"
  local message="$@"
  errecho "[${cyan}${debug_key}${no_color}][${white}${timestamp}${no_color}]: $message"
}

debug() {
  debug_core "$SCRIPT_NAME" "$@"
}

fatal() {
  local message="$@"
  errecho "Error: $message"
  exit 1
}

warn() {
  local message="$@"
  errecho "Warning: $message"
}

errecho() {
  local message="$@"
  (>&2 echo -e "$message")
}

compose_yaml_as_json() {
  remarshall \
    --input-file="$DOCKER_COMPOSE_YAML_PATH" \
    --input-format="yaml" \
    --output-format="json"
}

get_machines() {
  docker-machine ls | grep -v ACTIVE
}

get_machine_names() {
  get_machines | awk '{print $1}'
}

get_nodes_by_role_unverified() {
  local role="$1"
  docker node ls --filter "role = $role" | grep Ready | grep -v HOSTNAME | sed 's/\*//' | awk '{print $2}'
}

get_node_ids() {
  docker node ls | grep Ready | grep -v HOSTNAME | sed 's/\*//' | awk '{print $2}'
}

get_nodes_by_role() {
  local role="$1"
  if [ -z "$STACK_DIR" ]; then
    debug 'cannot get nodes because it does not have STACK_DIR set'
    return 0
  fi
  for node_name in $(get_nodes_by_role_unverified "$role"); do
    verify_node_name "$node_name"
  done
}

verify_node_name() {
  local node_name="$1"
  if [ "$node_name" == "null" ]; then
    fatal "Unable to find a matching machine. Try and octoswarm in again."
  elif [ "$node_name" == "moby" ]; then
    fatal "Found a matching machine, but it is likely your local machine (moby). Try and octoswarm in again."
  else
    echo "$node_name"
  fi
}

get_managers() {
  get_nodes_by_role 'manager'
}

get_manager_ids() {
  get_managers
}

get_managers_count() {
  get_managers | wc -l | xargs
}

get_manager_id_unverified() {
  docker node ls --filter "role = manager" | grep -v HOSTNAME | grep '*' | sed 's/\*//' | awk '{print $2}'
}

get_manager_id() {
  local manager_id
  if [ -z "$STACK_DIR" ]; then
    debug 'cannot get manager id because it does not have STACK_DIR set'
    return 0
  fi
  manager_id="$(get_manager_id_unverified)"
  verify_node_name "$manager_id"
}

get_manager_public_ip() {
  docker-machine ip "$(get_manager_id)"
}

get_manager_private_ip() {
  local public_ip
  public_ip="$(get_manager_public_ip)"
  aws ec2 describe-instances --filters "Name=ip-address,Values=$public_ip" | jq --raw-output  '.Reservations[].Instances[].PrivateIpAddress' 2> /dev/null
}

get_workers() {
  get_nodes_by_role 'worker'
}

get_workers_count() {
  get_workers | wc -l | xargs
}

service_exists() {
  local name="$1"
  for service_name in $(docker service ls | grep -v NAME | awk '{print $2}'); do
    if [ "$service_name" == "$name" ]; then
      return 0
    fi
  done
  return 1
}

elb_exists() {
  local elb_name="$1"
  aws elb describe-load-balancers --load-balancer-name "$elb_name" &> /dev/null || return 1
  return 0
}

require_compose_value() {
  local key="$1"

  check_compose_value "$key" \
  && return 0

  errecho "* Cannot get $key from config."
  fatal "$STACK_CONFIG_PATH is invalid json."
}

require_config_value() {
  local key="$1"
  local exit_code
  check_config_value "$key"
  exit_code=$?
  if [ "$exit_code" != "0" ]; then
    errecho "* Cannot get $key from config."
    fatal "$STACK_CONFIG_PATH is invalid json."
  fi
}

check_compose_value() {
  local key="$1"

  compose_yaml_as_json | jq "$key" "$STACK_CONFIG_PATH" &> /dev/null
}

check_config_value() {
  local key="$1"

  jq "$key" "$STACK_CONFIG_PATH" &> /dev/null
}

get_config_val() {
  local key="$1"
  local value
  local exit_code
  value="$(jq --raw-output "$key" "$STACK_CONFIG_PATH" 2>/dev/null)"
  exit_code=$?
  if [ -z "$value" ] || [ "$exit_code" != "0" ]; then
    fatal "Unable to get $key from config"
  fi
  debug "got $key = $value"
  echo "$value"
}

get_compose_array() {
  local key="$1"

  compose_yaml_as_json \
  | jq --compact-output "$key" 2> /dev/null
}

get_config_array() {
  local key="$1"
  jq --compact-output "$key" "$STACK_CONFIG_PATH" 2> /dev/null
}

get_service_full_name() {
  local name service_name stack_env_name stack_name
  service_name="$1"
  name="$(get_service_val "$service_name" '.name')"
  stack_env_name="$(get_config_val '.stackEnvName')"
  stack_name="$(get_config_val '.stackName')"

  echo "$stack_env_name-$stack_name-$name"
}

get_service_val() {
  local service_name="$1"
  local key="$2"
  local exit_code
  value="$(get_service_by_name "$service_name" | jq --raw-output "$key" 2> /dev/null)"
  exit_code=$?
  if [ "$exit_code" != "0" ]; then
    fatal "Unable to get $key from config"
  fi
  if [ "$value" == "null" ]; then
    value=""
  fi
  debug "got $key = $value"
  echo "$value"
}

get_service_array() {
  local service_name="$1"
  local key="$2"
  debug "get array $key"
  debug "$(get_service_by_name "$service_name")"
  get_service_by_name "$service_name" | jq --compact-output "$key" 2> /dev/null
}

get_service_array_raw() {
  local service_name="$1"
  local key="$2"
  debug "get array $key"
  debug "$(get_service_by_name "$service_name")"
  get_service_by_name "$service_name" | jq --compact-output --raw-output "$key" 2> /dev/null
}

get_service_by_name() {
  local service_name="$1"
  jq --compact-output --arg service_name "$service_name" '.services[] | select(.name==$service_name)' "$STACK_CONFIG_PATH" 2>/dev/null
}

is_stack_empty() {
  test -d "$MACHINE_STORAGE_PATH/machines"
}

version(){
  if [ -f "$VERSION_FILE_PATH" ]; then
    cat "$VERSION_FILE_PATH"
  else
    echo "unknown"
  fi
}

get_tag_or_branch() {
  if [ -f "$VERSION_FILE_PATH" ]; then
    echo "v$(cat "$VERSION_FILE_PATH")"
  else
    echo "master"
  fi
}

run_cmd() {
  debug "about to run: $*"
  if [ "$DRY_RUN" == 'true' ]; then
    echo "$@"
  else
    "$@"
  fi
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

function join_by {
  local IFS="$1"; shift; echo "$*";
}

function get_ec2_tags_by_role {
  local ec2_tags envName role stackName
  role="$1"

  envName="$(get_config_val '.stackEnvName')"
  stackName="$(get_config_val '.stackName')"

  local rebootable="false"
  if [ "$role" == "worker" ]; then
    rebootable="true"
  fi

  ec2_tags="octoswarm:role,$role,octoswarm:stack,$envName-$stackName,methodical-monkey:rebootable,$rebootable"

  echo "$ec2_tags"
}
