#!/bin/bash

SCRIPT_NAME="stack-ensure-pingdom-check"

# shellcheck disable=SC1091
source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

usage(){
  echo "USAGE: $SCRIPT_NAME <service_name>"
  echo 'Description: ensure pingdom alerts for a service'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help        print this help text'
  echo '  -v, --version     print the version'
  echo 'Environment:'
  echo '  DEBUG             print debug output'
}

assert_required_params() {
  local service_name="$1"
  if [ -z "$service_name" ]; then
    fatal 'Missing service-name as first arg'
  fi
}

get_pingdom_contact_from_list() {
  local contact="$1"
  local email="$(echo "$contact" | jq --raw-output '.email')"
  debug "finding pingdom contact: $email"
  curl \
    --silent \
    --request GET \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    "https://api.pingdom.com/api/2.0/notification_contacts" | jq --arg email $email '.contacts[] | select(.email==$email) | .id'
}

create_pingdom_contact() {
  local contact="$1"
  local name="$(echo "$contact" | jq --raw-output ".name")"
  local email="$(echo "$contact" | jq --raw-output ".email")"
  debug "creating pingdom contact: $email"
  curl \
    --silent \
    --request POST \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data "name=$name" \
    --data-urlencode "email=$email" \
    "https://api.pingdom.com/api/2.0/notification_contacts" | jq '.contact.id'
}

get_pingdom_contact_id() {
  local contact="$1"
  local contact_id="$(get_pingdom_contact_from_list "$contact")"
  if [ "$contact_id" == "" ]; then
    contact_id="$(create_pingdom_contact "$contact")"
  fi
  echo "$contact_id"
}

get_pingdom_additional_contacts() {
  local service_name="$1"
  local additional_contact_ids
  get_service_array "$service_name" '.pingdom.contacts[]' | while read contact; do
    local contact_id="$(get_pingdom_contact_id "$contact")"
    if [ "$contact_id" != "" ]; then
      echo "$contact_id"
    fi
  done
}

get_pingdom_contact_ids() {
  local service_name="$1"
  local contact_ids
  local pagerduty="$(get_service_val "$service_name" '.pingdom.pagerduty')"
  if [ "$pagerduty" != "false" ]; then
    contact_ids="11058966"
  fi
  local additional_contact_ids=( $(get_pingdom_additional_contacts "$service_name") )
  additional_contact_ids="$(join_by , "${additional_contact_ids[@]}")"
  join_by , $contact_ids $additional_contact_ids
}

get_pingdom_path() {
  local service_name="$1"
  local path="$(get_service_val "$service_name" '.pingdom.path')"
  if [ "$path" == "" ]; then
    path="/healthcheck"
  fi
  echo "$path"
}

get_pingdom_host() {
  local service_name="$1"
  local host="$(get_service_val "$service_name" '.traefik.host')"
  local pingdom_host="$(get_service_val "$service_name" '.pingdom.host')"
  if [ "$pingdom_host" != "" ]; then
    host="$pingdom_host"
  fi
  echo "$host"
}

get_pingdom_should_contain() {
  local service_name="$1"
  local should_contain="$(get_service_val "$service_name" '.pingdom.shouldContain')"
  if [ "$should_contain" == "" ]; then
    should_contain='{"online":true}'
  fi
  if [ "$should_contain" == "false" ]; then
    should_contain=""
  fi
  echo "$should_contain"
}

get_pingdom_tags() {
  local service_name="$1"
  local parent_tags="$(get_config_val '.pingdom.tags')"
  local service_tags="$(get_service_val "$service_name" '.pingdom.tags')"
  local search_tags="$(get_service_full_name "$service_name")"
  local stack_env_name="$(get_config_val '.stackEnvName')"
  local stack_name="$(get_config_val '.stackName')"

  if [ "$parent_tags" == "null" ]; then
    parent_tags=""
  fi
  if [ "$parent_tags" != "" ]; then
    parent_tags="$parent_tags,"
  fi
  if [ "$service_tags" != "" ]; then
    service_tags="$service_tags,"
  fi
  echo "$stack_env_name,$stack_name,$stack_env_name-$stack_name,$parent_tags$service_tags$search_tags"
}

add_pingdom_check() {
  local service_name="$1"
  local check_id="$(find_pingdom_check "$service_name")"

  if [ "$check_id" == "" ]; then
    create_pingdom_check "$service_name"
  else
    update_pingdom_check "$service_name" "$check_id"
  fi
}

get_pingdom_check_options() {
  local service_name="$1"
  local name="$(get_service_full_name "$service_name")"
  local path="$(get_pingdom_path "$service_name")"
  local tags="$(get_pingdom_tags "$service_name")"
  local host="$(get_pingdom_host "$service_name")"
  local auth="$(get_service_val "$service_name" '.pingdom.auth')"
  local should_contain="$(get_pingdom_should_contain "$service_name")"
  local contact_ids="$(get_pingdom_contact_ids "$service_name")"

  local options
  options="$options --data paused=false"
  options="$options --data resolution=1"
  options="$options --data encryption=true"
  options="$options --data sendtoemail=true"
  options="$options --data sendnotificationwhendown=5"
  options="$options --data notifywhenbackup=true"
  options="$options --data use_legacy_notifications=true"

  if [ "$contact_ids" != "" ]; then
    options="$options --data contactids=$contact_ids"
  fi
  if [ "$should_contain" != "" ]; then
    options="$options --data shouldcontain=$should_contain"
  fi
  if [ "$auth" != "" ]; then
    options="$options --data auth=$auth"
  fi
  if [ "$name" != "" ]; then
    options="$options --data name=$name"
  fi
  if [ "$host" != "" ]; then
    options="$options --data host=$host"
  fi
  if [ "$tags" != "" ]; then
    options="$options --data tags=$tags"
  fi
  if [ "$path" != "" ]; then
    options="$options --data url=$path"
  fi

  debug options "$options"
  echo "$options"
}

create_pingdom_check() {
  local service_name="$1"
  local pingdom_check_options="$(get_pingdom_check_options "$service_name")"

  curl \
    --silent \
    --request POST \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data 'type=http' \
    $pingdom_check_options \
    "https://api.pingdom.com/api/2.0/checks"
}

ensure_pingdom_check() {
  local service_name="$1"
  debug "ensure pingdom check"
  local check="$(get_service_val "$service_name" '.pingdom.check')"
  if [ "$check" == "true" ]; then
    add_pingdom_check "$service_name"
  fi
  if [ "$check" == "false" ]; then
    remove_pingdom_check "$service_name"
  fi
}

find_pingdom_check() {
  local service_name="$1"
  local search_tags="$(get_service_full_name "$service_name")"

  local check_id="$(curl \
    --silent \
    --request GET \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    "https://api.pingdom.com/api/2.0/checks?limit=1&tags=$search_tags" | jq --raw-output '.checks[0].id')"

  if [ "$check_id" == "null" ]; then
    check_id=""
  fi

  echo $check_id
}

pause_pingdom_check() {
  local service_name="$1"
  local check_id="$2"

  curl \
    --silent \
    --request PUT \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    --data 'paused=true' \
    "https://api.pingdom.com/api/2.0/checks/$check_id"
}

remove_pingdom_check() {
  local service_name="$1"
  local check_id="$(find_pingdom_check "$service_name")"

  if [ "$check_id" != "" ]; then
    pause_pingdom_check "$service_name" "$check_id"
  fi
}

update_pingdom_check() {
  local service_name="$1"
  local check_id="$2"

  local pingdom_check_options="$(get_pingdom_check_options "$service_name")"

  curl \
    --silent \
    --request PUT \
    --header "App-Key: $PINGDOM_APP_KEY" \
    --user "$PINGDOM_USERNAME:$PINGDOM_PASSWORD" \
    $pingdom_check_options \
    "https://api.pingdom.com/api/2.0/checks/$check_id"
}

main() {
  local service_name
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"

    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$service_name" ]; then
          service_name="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$service_name"

  is_stack_empty || fatal 'Not initialized, run `create-cluster`'

  local exit_code
  local service="$(get_service_by_name "$service_name")"
  if [ "$service" == "" ]; then
    fatal "Unable to find $service_name"
  fi
  if [ "$service_name" != "" ]; then
    ensure_pingdom_check "$service_name"
    exit_code=$?
    exit $exit_code
  fi
}

main "$@"
