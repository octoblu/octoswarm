#!/usr/bin/env node

var fs = require('fs')

class StackRoute53 {
  constructor(argv) {
    this.options = {
      configPath:      this._getRequiredEnv('CONFIG_PATH'),
      domain:          this._getRequiredEnv('DOMAIN'),
      loadBalancerDns: this._getRequiredEnv('LOAD_BALANCER_DNS'),
      zoneId:          this._getRequiredEnv('ZONE_ID'),
    }
  }

  run() {
    const serviceRoutes = this._serviceRoutes()
    const srvRoutes = this._srvRoutes()

    const routes = {
      Comment: "Stack Update DNS",
      Changes: [...serviceRoutes, ...srvRoutes],
    }
    console.log(JSON.stringify(routes, null, 2))
    process.exit(0)
  }

  _getRequiredEnv(envName) {
    if (process.env[envName]) return process.env[envName]
    throw new Error(`Missing env: ${envName}`)
  }

  _serviceRoutes() {
    const changes = []

    const clusterJSON = JSON.parse(fs.readFileSync(this.options.configPath))
    clusterJSON.services.forEach((service) => {
      if (!(service.traefik && service.traefik.host)) return

      changes.push({
        Action: 'UPSERT',
        ResourceRecordSet: {
          Name: service.traefik.host,
          Type: 'A',
          AliasTarget: {
            HostedZoneId: this.options.zoneId,
            DNSName:      this.options.loadBalancerDns,
            EvaluateTargetHealth: false,
          }
        }
      })
    })

    return changes
  }

  _srvRoutes() {
    const clusterJSON = JSON.parse(fs.readFileSync(this.options.configPath))
    const srvRecords = clusterJSON.srvRecords || []

    return srvRecords.map((record) => {
      return {
        Action: 'UPSERT',
        ResourceRecordSet: {
          Name: `${record.subdomain}.${this.options.domain}`,
          Type: 'SRV',
          TTL: (record.ttl || 300),
          ResourceRecords: record.values.map((value) => ({ Value: value })),
        },
      }
    })
  }
}

const stackRoute53 = new StackRoute53()
stackRoute53.run()
