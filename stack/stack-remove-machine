#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-remove-machine" "$@"
}

assert_required_params() {
  local machine_id="$1"

  if [ -z "$machine_id" ]; then
    fatal "Missing machine-id as first argument"
  fi
}

usage(){
  echo 'USAGE: stack-remove-machine <machine-id>'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help                       print this help text'
  echo '  -v, --version                    print the version'
  echo 'Environment:'
  echo '  AWS_ACCESS_KEY_ID      AWS Access ID'
  echo '  AWS_SECRET_ACCESS_KEY  AWS Secret Key'
  echo '  AWS_DEFAULT_REGION     AWS Default Region'
  echo '  DEBUG                  print debug output'
}

version(){
  local directory="$(script_directory)/.."

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

demote_machine() {
  local machine_id="$1"
  debug "demoting machine $machine_id"
  docker node demote "$machine_id" > /dev/null
}

drain_machine() {
  local machine_id="$1"
  docker node update --availability drain "$machine_id" > /dev/null
}

remove_docker_machine() {
  local machine_id="$1"
  debug "removing docker-machine $machine_id"
  docker-machine rm --force "$machine_id" > /dev/null
}

remove_config() {
  local machine_id="$1"
  local config_folder="$MACHINE_STORAGE_PATH/machines/$machine_id"
  if [ -d "$config_folder" ]; then
    debug "removing $config_folder"
    rm -rf "$config_folder"
    return 0
  fi
  debug "config folder didn't exist $config_folder"
}

double_check() {
  local machine_id="$1"
  local good_to_go=''
  read -s -p "press 'y' to permanently delete this machine $machine_id"$'\n' -n 1 good_to_go
  if [[ "$good_to_go" == 'y' ]]; then
    return 0
  fi
  return 1
}

main() {
  local machine_id
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$machine_id" ]; then
          machine_id="$param"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$machine_id"

  double_check "$machine_id" || fatal 'Exiting...'
  demote_machine "$machine_id"
  drain_machine "$machine_id"
  remove_docker_machine "$machine_id"
  remove_config "$machine_id"
}

main "$@"
