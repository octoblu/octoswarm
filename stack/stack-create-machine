#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "$(script_directory)/utils" || fatal 'unable to load utils'

debug() {
  debug_core "stack-create-machine" "$@"
}

assert_required_params(){
  local machine_id="$1"

  if [ -n "$machine_id" ]; then
    return 0
  fi

  usage

  if [ -z "$machine_id" ]; then
    echo "machine_id is missing"
  fi

  exit 1
}

select_random_zone(){
  local zones=('a', 'b', 'c')
  local rand=$[$RANDOM % 3]
  echo "${zones[$rand]/,/}"
}

create_machine() {
  local machine_id="$1"; shift;
  local options="$@"
  echo "$(docker-machine create $options "$machine_id")"
}

copy_to_template() {
  local machine_id="$1"
  local src_dir="$2"
  local dest_dir="$3"

  cp -rfp "$src_dir/$machine_id" "$dest_dir/$machine_id"
  local config_file="$dest_dir/$machine_id/config.json"
  cat "$config_file" | sed "s;$HOME;\$HOME;g" > "$config_file.tmp" && \
    mv "$config_file.tmp" "$config_file"
}

usage(){
  echo 'USAGE: stack-create-machine'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help               print this help text'
  echo '  -t, --ec2-instance-type  ec2 instance type to spin up'
  echo '                           (default: t2.medium)'
  echo '  -v, --version            print the version'
  echo 'Environment:'
  echo '  DEBUG                    print debug output'
}

version(){
  local directory="$(script_directory)/.."

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown"
  fi
}

main() {
  local machine_id
  local ec2_instance_type="t2.medium"

  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -t | --ec2-instance-type)
        ec2_instance_type="$value"
        shift
        ;;
      -v | --version)
        version
        exit 0
        ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        if [ -z "$machine_id" ]; then
          machine_id="${param}"
        fi
        ;;
    esac
    shift
  done

  assert_required_params "$machine_id"

  debug "machine id $machine_id"

  local ec2_zone="$(select_random_zone)"
  debug "using ec2 zone $ec2_zone"
  debug "using ec2 instance type $ec2_instance_type"

  local template_dir=""

  assert_required_params "$machine_id"

  echo "Creating $machine_id"
  
  create_machine "$machine_id" \
    --driver amazonec2 \
    --amazonec2-access-key "$AWS_ACCESS_KEY_ID" \
    --amazonec2-secret-key "$AWS_SECRET_ACCESS_KEY" \
    --amazonec2-region "us-west-2" \
    --amazonec2-zone "$ec2_zone"\
    --amazonec2-root-size "100" \
    --amazonec2-instance-type "$ec2_instance_type" \
    --amazonec2-security-group "swarm-prod" \
    --amazonec2-security-group "swarm-prod-ssh" || fatal 'unable to create machine'

  mkdir -p $STACK_ENV_DIR/machine/machines
  mkdir -p $STACK_ENV_DIR/machine-template/machines
  mkdir -p $STACK_ENV_DIR/machine-template/certs
  copy_to_template "$machine_id" \
    $STACK_ENV_DIR/machine/machines \
    $STACK_ENV_DIR/machine-template/machines || fatal 'unable to copy machine templates'

  cp -rfp $STACK_ENV_DIR/machine/certs/* $STACK_ENV_DIR/machine-template/certs/
}

main "$@"
