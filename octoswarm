#!/bin/bash

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

debug() {
  debug_core "octoswarm" "$@"
}

usage(){
  echo 'USAGE: octoswarm <script-name> [options]'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo ''
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  SAY_YES            prompt for dangerous actions'
  echo '  AWS_ACCESS_KEY_ID     (required)'
  echo '  AWS_SECRET_ACCESS_KEY (required)'
  echo '  AWS_DEFAULT_REGION    (required)'
  echo '  DOCKER_HUB_USERNAME   (required)'
  echo '  DOCKER_HUB_PASSWORD   (required)'
  echo '  BEEKEEPER_URI         (required)'
  echo ''
  echo 'Avialable Commands:'
  echo ''
  get_commands
  echo ''
}

assert_required_env() {
  if [ -z "$AWS_ACCESS_KEY_ID" ]; then
    fatal 'Missing required env AWS_ACCESS_KEY_ID'
  fi

  if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
    fatal 'Missing required env AWS_ACCESS_KEY_ID'
  fi

  if [ -z "$AWS_DEFAULT_REGION" ]; then
    fatal 'Missing required env AWS_DEFAULT_REGION'
  fi

  if [ -z "$DOCKER_HUB_USERNAME" ]; then
    fatal 'Missing required env DOCKER_HUB_USERNAME'
  fi

  if [ -z "$DOCKER_HUB_PASSWORD" ]; then
    fatal 'Missing required env DOCKER_HUB_PASSWORD'
  fi

  if [ -z "$BEEKEEPER_URI" ]; then
    fatal 'Missing required env BEEKEEPER_URI'
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_TOKEN" ]; then
    fatal 'Missing required env OCTOSWARM_LOGENTRIES_TOKEN'
  fi
}

assert_stack() {
  if [ ! -f "$STACK_CONFIG_PATH" ]; then
    fatal "octoswarm must be run in a folder with a cluster.json"
  fi
  require_config_value '.'
  require_config_value '.stackEnvName'
  require_config_value '.stackName'
}

assert_octoswarm_command() {
  local script_name="$1"
  case "$script_name" in
    ls | list)
      get_commands
      exit 0
      ;;
  esac
  if [ -z "$(which $script_name)" ]; then
    echo "The octoswarm cannot run command $script_name"
    echo ''
    echo 'It must be one of the following scripts:'
    echo ''
    get_commands
    echo ''
    return 1
  fi
  return 0
}

connect_to_machine() {
  if [ ! -d "$MACHINE_STORAGE_PATH/machines" ]; then
    warn "Missing docker-machine directory ($MACHINE_STORAGE_PATH)"
    return 1
  fi
  local machine_id
  machine_id="$(get_machine_id)"
  local found_machine_code="$?"
  if [ -z "$machine_id" ]; then
    fatal "Unable to find machine"
  fi
  if [ "$found_machine_code" != "0" ]; then
    errecho "$machine_id"
    fatal "Unable to connect to a machine"
  fi
  debug "connecting to machine $machine_id"
  eval $(docker-machine env --shell=bash "$machine_id")
}

escape_value_for_sed() {
  echo "$1" | sed -e 's/[\/&]/\\&/g'
}

get_machine_ids(){
  find "$MACHINE_STORAGE_PATH/machines" -iname "$STACK_ENV_NAME-$STACK_NAME-manager-*" -maxdepth 1 -mindepth 1 -type d
}

get_machine_id() {
  local machine_id
  local machines=$(get_machine_ids)
  for machine_dir in $machines; do
    machine_id="$(basename "$machine_dir")"
    validate_machine_id "$machine_id"
    if [ "$?" == "0" ]; then
      debug "found manager id $machine_id"
      echo "$machine_id"
      return 0
    else
      warn "Machine '${machine_id}' was unreachable. Trying another one."
    fi
    n=$[$n+1]
  done
  return 1
}

get_commands() {
  echo "octoswarm docker"
  echo "octoswarm docker-machine"
  for file in `ls "$OCTOSWARM_BIN_DIR"`; do
    echo "octoswarm ${file/${OCTOSWARM_BIN_DIR}/}"
  done
}

run_script() {
  local script="$1"; shift
  "$script" "$@"
}

validate_machine_id() {
  local machine_id="$1"
  debug 'validating machine id' "$machine_id"
  docker-machine config "$machine_id" 2>&1 | grep -i 'error' && return 1
  return 0
}

main() {
  local script_name="$1"

  case "$script_name" in
    -h | --help | help)
      usage
      exit 0
      ;;
    -v | --version | version)
      version
      exit 0
      ;;
  esac

  assert_required_env
  assert_octoswarm_command "$script_name"
  assert_stack
  export STACK_NAME="$(get_config_val '.stackName')"
  export STACK_ENV_NAME="$(get_config_val '.stackEnvName')"
  export STACK_TMP_DIR="/tmp/$STACK_ENV_NAME-$STACK_NAME"
  mkdir -p "$MACHINE_STORAGE_PATH"

  connect_to_machine

  shift
  debug "running script $script_name"
  run_script "$script_name" "$@"
  exit $?
}

main "$@"
