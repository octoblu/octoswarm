#!/bin/bash

SUPPORTED_VERSION="10.0.0"

# shellcheck disable=SC1091
source "/usr/src/app/stack/utils" || fatal 'unable to load utils'

debug() {
  debug_core "octoswarm" "$@"
}

usage(){
  echo 'USAGE: octoswarm <script-name> [options]'
  echo ''
  echo 'Arguments:'
  echo '  -h, --help         print this help text'
  echo '  -v, --version      print the version'
  echo ''
  echo 'Environment:'
  echo '  DEBUG              print debug output'
  echo '  SAY_YES            prompt for dangerous actions'
  echo '  AWS_ACCESS_KEY_ID     (required)'
  echo '  AWS_SECRET_ACCESS_KEY (required)'
  echo '  AWS_DEFAULT_REGION    (required)'
  echo '  DOCKER_HUB_USERNAME   (required)'
  echo '  DOCKER_HUB_PASSWORD   (required)'
  echo '  BEEKEEPER_URI         (required)'
  echo '  PINGDOM_APP_KEY       (required)'
  echo '  PINGDOM_USERNAME      (required)'
  echo '  PINGDOM_PASSWORD      (required)'
  echo '  OCTOSWARM_LOGENTRIES_ACCOUNT_RESOURCE_ID (required)'
  echo '  OCTOSWARM_LOGENTRIES_OWNER_API_KEY_ID    (required)'
  echo '  OCTOSWARM_LOGENTRIES_OWNER_API_KEY       (required)'
  echo '  OCTOSWARM_LOGENTRIES_RW_API_KEY          (required)'
  echo '  OCTOSWARM_LOGENTRIES_LOG_ID              (required)'
  echo '  OCTOSWARM_LOGENTRIES_TOKEN               (required)'
  echo '  OCTOSWARM_LOGENTRIES_SERVER_TOKEN        (required)'
  echo '  OCTOSWARM_GITHUB_API_TOKEN               (required)'
  echo '  OCTOSWARM_MACHINE                        (optional)'
  echo ''
  echo 'Avialable Commands:'
  echo ''
  get_commands
  echo ''
}

assert_required_env() {
  if [ -z "$AWS_ACCESS_KEY_ID" ]; then
    errecho 'Missing required env AWS_ACCESS_KEY_ID'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
    errecho 'Missing required env AWS_ACCESS_KEY_ID'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$AWS_DEFAULT_REGION" ]; then
    errecho 'Missing required env AWS_DEFAULT_REGION'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$DOCKER_HUB_USERNAME" ]; then
    errecho 'Missing required env DOCKER_HUB_USERNAME'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$DOCKER_HUB_PASSWORD" ]; then
    errecho 'Missing required env DOCKER_HUB_PASSWORD'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$BEEKEEPER_URI" ]; then
    errecho 'Missing required env BEEKEEPER_URI'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_ACCOUNT_RESOURCE_ID" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_ACCOUNT_RESOURCE_ID'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_OWNER_API_KEY_ID" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_OWNER_API_KEY_ID'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_OWNER_API_KEY" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_OWNER_API_KEY'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_RW_API_KEY" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_RW_API_KEY'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_LOG_ID" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_LOG_ID'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_TOKEN" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_TOKEN'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_LOGENTRIES_SERVER_TOKEN" ]; then
    errecho 'Missing required env OCTOSWARM_LOGENTRIES_SERVER_TOKEN'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$OCTOSWARM_GITHUB_API_TOKEN" ]; then
    errecho 'Missing required env OCTOSWARM_GITHUB_API_TOKEN'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$PINGDOM_APP_KEY" ]; then
    errecho 'Missing required env PINGDOM_APP_KEY'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$PINGDOM_USERNAME" ]; then
    errecho 'Missing required env PINGDOM_USERNAME'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi

  if [ -z "$PINGDOM_PASSWORD" ]; then
    errecho 'Missing required env PINGDOM_PASSWORD'
    errecho '-- make sure dotfiles is up to date'
    exit 1
  fi
}

assert_required_stack_version() {
  local stack_version="$1"

  if [ "$stack_version" != "$SUPPORTED_VERSION" ]; then
    fatal "$stack_version is not supported. $SUPPORTED_VERSION is required, exiting."
  fi
}

assert_latest_version() {
  local script_dir="$(script_directory)"
  local current_version="$(cat $script_dir/../VERSION)"
  local latest_version="$(curl --fail --silent "https://sqrtofsaturn:$OCTOSWARM_GITHUB_API_TOKEN@api.github.com/repos/octoblu/octoswarm/releases/latest" | jq --raw-output '.tag_name' | tr -d 'v')"

  if [ "$current_version" != "$latest_version" ]; then
    errecho "octoswarm is not up to date. Current Version: $current_version, Latest Version: $latest_version. Cowardly refusing to do anything."
    fatal 'Please run `octoswarm --upgrade` to get the latest version.'
  fi
}

assert_stack() {
  if [ ! -f "$STACK_CONFIG_PATH" ]; then
    fatal "octoswarm must be run in a folder with a cluster.json"
  fi
  require_config_value '.'
  require_config_value '.stackEnvName'
  require_config_value '.stackName'
}

assert_octoswarm_command() {
  local script_name="$1"
  case "$script_name" in
    ls | list)
      get_commands
      exit 0
      ;;
  esac
  if [ -z "$(which $script_name)" ]; then
    echo "The octoswarm cannot run command $script_name"
    echo ''
    echo 'It must be one of the following scripts:'
    echo ''
    get_commands
    echo ''
    return 1
  fi
  return 0
}

become_a_real_boy() {
  local uid
  uid="$(id -u)"

  mkdir -p /home/octoblu
  echo "octoblu:x:${uid}:${uid}:Linux User,,,:/home/octoblu:" >> /etc/passwd
}

copy_lecli_config() {
  mkdir -p "$XDG_CONFIG_HOME/lecli"
  cat "/usr/src/app/assets/lecli-config.ini" | envsubst > "$XDG_CONFIG_HOME/lecli/config.ini"
}

create_docker_config() {
  local header
  mkdir -p /usr/local/etc/docker
  header=$(echo "{\"username\":\"${DOCKER_HUB_USERNAME}\",\"password\":\"${DOCKER_HUB_PASSWORD}\"}" | base64 -w 0)
  echo "{ \"HttpHeaders\": { \"X-Registry-Auth\": \"$header\" } }" > /usr/local/etc/docker/config.json
}

connect_to_machine() {
  if [ ! -d "$MACHINE_STORAGE_PATH/machines" ]; then
    warn "Missing docker-machine directory ($MACHINE_STORAGE_PATH)"
    return 1
  fi
  local machine_id
  machine_id="$(get_machine_id)"
  local found_machine_code="$?"
  if [ -z "$machine_id" ]; then
    fatal "Unable to find machine"
  fi
  if [ "$found_machine_code" != "0" ]; then
    errecho "$machine_id"
    errecho "*HINT* you might need to restart Docker for Mac"
    fatal "Unable to connect to a machine"
  fi

  debug "connecting to machine $machine_id"
  eval "$(docker-machine env --shell=bash "$machine_id")"
}

escape_value_for_sed() {
  echo "$1" | sed -e 's/[\/&]/\\&/g'
}

get_manager_machine_ids(){
  find "$MACHINE_STORAGE_PATH/machines" -iname "$STACK_ENV_NAME-$STACK_NAME-manager-*" -maxdepth 1 -mindepth 1 -type d
}

get_machine_ids() {
  find "$MACHINE_STORAGE_PATH/machines" -iname "$STACK_ENV_NAME-$STACK_NAME-*" -maxdepth 1 -mindepth 1 -type d
}

get_machine_id() {
  local machine_id
  local machines
  update_cert_permissions
  if [ -n "$OCTOSWARM_MACHINE" ]; then
    validate_machine_id "$OCTOSWARM_MACHINE" || return 1
    debug "using $OCTOSWARM_MACHINE because OCTOSWARM_MACHINE is set"
    echo "$OCTOSWARM_MACHINE"
    return 0
  fi
  machines=$(get_manager_machine_ids)
  for machine_dir in $machines; do
    machine_id="$(basename "$machine_dir")"
    validate_machine_id "$machine_id"
    if [ "$?" == "0" ]; then
      debug "found manager id $machine_id"
      echo "$machine_id"
      return 0
    else
      warn "Machine '${machine_id}' was unreachable. Trying another one."
    fi
    n=$[$n+1]
  done
  return 1
}

get_commands() {
  echo "octoswarm docker"
  echo "octoswarm docker-machine"
  echo "octoswarm fish"
  echo "octoswarm bash"
  echo "octoswarm sen"
  for file in `ls "$OCTOSWARM_BIN_DIR"`; do
    echo "octoswarm ${file/${OCTOSWARM_BIN_DIR}/}"
  done
}

run_script() {
  local script="$1"; shift
  "$script" "$@"
}

update_cert_permissions() {
  for machine_dir in $(get_machine_ids); do
    local machine_private_key
    machine_private_key="$machine_dir/id_rsa"
    if [ -f "$machine_private_key" ]; then
      debug "updating permissions for $machine_dir"
      chmod 600 "$machine_private_key"
    fi
  done
}

validate_machine_id() {
  local machine_id="$1"
  debug 'validating machine id' "$machine_id"
  docker-machine config "$machine_id" 2>&1 | grep -i 'error' && return 1
  return 0
}

main() {
  local script_name="$1"
  local second_arg="$2"
  local third_arg="$3"

  case "$script_name" in
    -h | --help | help)
      usage
      exit 0
      ;;
    -v | --version | version)
      version
      exit 0
      ;;
  esac

  if [ "$script_name" == "stack" ]; then
    case "$second_arg" in
      -h | --help | help)
        stack --help
        exit 0
        ;;
    esac
  fi

  become_a_real_boy

  assert_required_env
  assert_octoswarm_command "$script_name"
  assert_stack
  local stack_version
  stack_version="$(get_config_val '.octoswarm.version')"
  assert_required_stack_version "$stack_version"
  assert_latest_version
  copy_lecli_config
  export STACK_NAME="$(get_config_val '.stackName')"
  export STACK_ENV_NAME="$(get_config_val '.stackEnvName')"
  export STACK_TMP_DIR="/tmp/$STACK_ENV_NAME-$STACK_NAME"
  mkdir -p "$MACHINE_STORAGE_PATH"

  create_docker_config
  connect_to_machine

  shift
  debug "running script $script_name"
  if [ "$script_name" == 'docker' \
      -a "$second_arg" == 'service' \
      -a "$third_arg" == 'update' ]; then
    warn "Please don't update a service manually, use 'stack ensure-service <service-name>'"
    confirm_please
  fi
  run_script "$script_name" "$@"
  exit $?
}

main "$@"
